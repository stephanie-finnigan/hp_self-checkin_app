using System;
using Microsoft.AspNet.Identity;
using Microsoft.Owin;
using Microsoft.Owin.Security.Cookies;
using Owin;
using System.Diagnostics.CodeAnalysis;
using NLog;
using System.Diagnostics;

namespace SelfCheckinWebApp
{
    [ExcludeFromCodeCoverage]
    public partial class Startup
    {
        private static Logger log = LogManager.GetCurrentClassLogger();

        public void ConfigureAuth(IAppBuilder app)
        {
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
                LoginPath = new PathString("/CheckIn/Find"),
                Provider = new CookieAuthenticationProvider
                {
                    OnApplyRedirect = ApplyRedirect
                }
            });
        }

        private static void ApplyRedirect(CookieApplyRedirectContext context)
        {
            Uri absoluteUri;
            if (Uri.TryCreate(context.RedirectUri, UriKind.Absolute, out absoluteUri))
            {
                log.Debug("Original redirect: " + absoluteUri.ToString());
                var originalRequestPath = context.Request.Path.ToString().TrimStart('/');
                var firstSlashIndex = originalRequestPath.IndexOf('/');
                var siteName = originalRequestPath.Substring(0, firstSlashIndex);

                log.Debug("Host: " + absoluteUri.Host);
                log.Debug("Site: " + siteName);
                log.Debug("Path: " + absoluteUri.LocalPath.TrimStart('/'));
                log.Debug("AbsolutePath: " + absoluteUri.AbsolutePath.TrimStart('/'));
                log.Debug("Query: " + absoluteUri.Query);

                var builder = new UriBuilder();
                if (Debugger.IsAttached)
                {
                    builder = new UriBuilder(absoluteUri.Scheme, absoluteUri.Host, absoluteUri.Port,
                                             string.Format("{0}/{1}", siteName, absoluteUri.AbsolutePath.TrimStart('/')),
                                             absoluteUri.Query);
                }
                else
                {
                    var slashIndex = absoluteUri.AbsolutePath.TrimStart('/').IndexOf('/');
                    var subFolder = absoluteUri.AbsolutePath.TrimStart('/').Substring(0, slashIndex);
                    log.Debug("Sub Folder: " + subFolder);
                    var remainingPath = absoluteUri.AbsolutePath.TrimStart('/').Substring(1);
                    log.Debug("Remaining Path: " + remainingPath);

                    builder = new UriBuilder(absoluteUri.Scheme, absoluteUri.Host, absoluteUri.Port,
                                             string.Format("{0}/{1}/{2}", subFolder, siteName, remainingPath),
                                             absoluteUri.Query);
                }

                var newRedirect = builder.ToString();

                context.RedirectUri = newRedirect;

                log.Debug("New redirect: " + newRedirect);
            }

            context.Response.Redirect(context.RedirectUri);
        }
    }

    
}